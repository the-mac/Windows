//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Blend.SampleData.HistorySampleData
{
	using System; 
	using System.ComponentModel;

// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
	internal class HistorySampleData { }
#else

    /// <summary>
    /// 
    /// </summary>
	public class HistorySampleData : INotifyPropertyChanged
	{
        /// <summary>
        /// 
        /// </summary>
		public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// 
        /// </summary>
        /// <param name="propertyName"></param>
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

        /// <summary>
        /// 
        /// </summary>
		public HistorySampleData()
		{
			try
			{
				Uri resourceUri = new Uri("/MyCompany.Expenses.Client.WP;component/SampleData/HistorySampleData/HistorySampleData.xaml", UriKind.RelativeOrAbsolute);
				System.Windows.Application.LoadComponent(this, resourceUri);
			}
			catch
			{
			}
		}

		private Expenses _Expenses = new Expenses();

        /// <summary>
        /// 
        /// </summary>
		public Expenses Expenses
		{
			get
			{
				return this._Expenses;
			}
		}
	}

    /// <summary>
    /// 
    /// </summary>
	public class Expenses : System.Collections.ObjectModel.ObservableCollection<ExpensesItem>
	{ 
	}

    /// <summary>
    /// 
    /// </summary>
	public class ExpensesItem : INotifyPropertyChanged
	{
        /// <summary>
        /// 
        /// </summary>
		public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// 
        /// </summary>
        /// <param name="propertyName"></param>
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private double _ExpenseId = 0;

        /// <summary>
        /// 
        /// </summary>
		public double ExpenseId
		{
			get
			{
				return this._ExpenseId;
			}

			set
			{
				if (this._ExpenseId != value)
				{
					this._ExpenseId = value;
					this.OnPropertyChanged("ExpenseId");
				}
			}
		}

		private double _Amount = 0;

        /// <summary>
        /// 
        /// </summary>
		public double Amount
		{
			get
			{
				return this._Amount;
			}

			set
			{
				if (this._Amount != value)
				{
					this._Amount = value;
					this.OnPropertyChanged("Amount");
				}
			}
		}

		private string _Name = string.Empty;

        /// <summary>
        /// 
        /// </summary>
		public string Name
		{
			get
			{
				return this._Name;
			}

			set
			{
				if (this._Name != value)
				{
					this._Name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}

		private double _Status = 0;
        
        /// <summary>
        /// 
        /// </summary>
		public double Status
		{
			get
			{
				return this._Status;
			}

			set
			{
				if (this._Status != value)
				{
					this._Status = value;
					this.OnPropertyChanged("Status");
				}
			}
		}

		private string _CreationDate = string.Empty;

        /// <summary>
        /// 
        /// </summary>
		public string CreationDate
		{
			get
			{
				return this._CreationDate;
			}

			set
			{
				if (this._CreationDate != value)
				{
					this._CreationDate = value;
					this.OnPropertyChanged("CreationDate");
				}
			}
		}

		private double _ExpenseType = 0;

        /// <summary>
        /// 
        /// </summary>
		public double ExpenseType
		{
			get
			{
				return this._ExpenseType;
			}

			set
			{
				if (this._ExpenseType != value)
				{
					this._ExpenseType = value;
					this.OnPropertyChanged("ExpenseType");
				}
			}
		}
	}
#endif
}
