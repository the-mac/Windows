//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DefaultScope {
    
    
    public class ListSampleOfflineContext : Microsoft.Synchronization.ClientServices.IsolatedStorage.IsolatedStorageOfflineContext {
        private const string SyncScopeName = "DefaultScope";
        
        public ListSampleOfflineContext(string cachePath, System.Uri serviceUri) : 
                base(GetSchema(), SyncScopeName, cachePath, serviceUri) {
        }
        
        public System.Collections.Generic.IEnumerable<Tag> TagCollection {
            get {
                return base.GetCollection<Tag>();
            }
        }
        
        public System.Collections.Generic.IEnumerable<Priority> PriorityCollection {
            get {
                return base.GetCollection<Priority>();
            }
        }
        
        public System.Collections.Generic.IEnumerable<Status> StatusCollection {
            get {
                return base.GetCollection<Status>();
            }
        }
        
        public System.Collections.Generic.IEnumerable<User> UserCollection {
            get {
                return base.GetCollection<User>();
            }
        }
        
        public System.Collections.Generic.IEnumerable<List> ListCollection {
            get {
                return base.GetCollection<List>();
            }
        }
        
        public System.Collections.Generic.IEnumerable<Item> ItemCollection {
            get {
                return base.GetCollection<Item>();
            }
        }
        
        public System.Collections.Generic.IEnumerable<TagItemMapping> TagItemMappingCollection {
            get {
                return base.GetCollection<TagItemMapping>();
            }
        }
        
        public void AddTag(Tag entity) {
            base.AddItem<Tag>(entity);
        }
        
        public void DeleteTag(Tag entity) {
            base.DeleteItem<Tag>(entity);
        }
        
        public void AddPriority(Priority entity) {
            base.AddItem<Priority>(entity);
        }
        
        public void DeletePriority(Priority entity) {
            base.DeleteItem<Priority>(entity);
        }
        
        public void AddStatus(Status entity) {
            base.AddItem<Status>(entity);
        }
        
        public void DeleteStatus(Status entity) {
            base.DeleteItem<Status>(entity);
        }
        
        public void AddUser(User entity) {
            base.AddItem<User>(entity);
        }
        
        public void DeleteUser(User entity) {
            base.DeleteItem<User>(entity);
        }
        
        public void AddList(List entity) {
            base.AddItem<List>(entity);
        }
        
        public void DeleteList(List entity) {
            base.DeleteItem<List>(entity);
        }
        
        public void AddItem(Item entity) {
            base.AddItem<Item>(entity);
        }
        
        public void DeleteItem(Item entity) {
            base.DeleteItem<Item>(entity);
        }
        
        public void AddTagItemMapping(TagItemMapping entity) {
            base.AddItem<TagItemMapping>(entity);
        }
        
        public void DeleteTagItemMapping(TagItemMapping entity) {
            base.DeleteItem<TagItemMapping>(entity);
        }
        
        private static Microsoft.Synchronization.ClientServices.IsolatedStorage.IsolatedStorageSchema GetSchema() {
            Microsoft.Synchronization.ClientServices.IsolatedStorage.IsolatedStorageSchema schema = new Microsoft.Synchronization.ClientServices.IsolatedStorage.IsolatedStorageSchema();
            schema.AddCollection<Tag>();
            schema.AddCollection<Priority>();
            schema.AddCollection<Status>();
            schema.AddCollection<User>();
            schema.AddCollection<List>();
            schema.AddCollection<Item>();
            schema.AddCollection<TagItemMapping>();
            return schema;
        }
    }
}
