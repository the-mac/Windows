<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls="using:GART.Controls"
    xmlns:converters="using:GART.Converters"
    xmlns:maps="using:Bing.Maps"
  >

    <!-- Converters used below -->

    <!-- Control templates -->
    <Style TargetType="controls:HeadingIndicator">
        <Setter Property="InvertRotation" Value="True" />
		<Setter Property="Width" Value="300" />
		<Setter Property="Height" Value="300" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:HeadingIndicator">
                    <Grid x:Name="IndicatorElement" RenderTransformOrigin="0.5,0.5">
                    	<Grid.ColumnDefinitions>
                    		<ColumnDefinition Width="0.25*"/>
                    		<ColumnDefinition Width="0.5*" />
                    		<ColumnDefinition Width="0.25*"/>
                    	</Grid.ColumnDefinitions>
                    	<Grid.RowDefinitions>
                    		<RowDefinition Height="0.453*"/>
                    		<RowDefinition Height="0.5*"/>
                    	</Grid.RowDefinitions>
                        <Ellipse Stretch="Fill" StrokeThickness="4" StrokeLineJoin="Round" Stroke="#FF000000" Fill="#24000000" Grid.RowSpan="2" Grid.ColumnSpan="3"/>
                        <Path Stretch="Fill" StrokeThickness="4" StrokeLineJoin="Round" Stroke="#FF000000" Fill="#40FFFF00" Data="F1 M149.55586,154.64513 L228,22.999901 C201,12.1666 174,1.3332601 147.5,2.0832601 C121,2.8332601 95,15.1666 69,27.499901 L149.55586,154.64513 z" UseLayoutRounding="False" Grid.Column="1" Margin="0,0,0,-1.659"/>
                        <Grid.RenderTransform>
                            <RotateTransform Angle="{Binding Rotation, RelativeSource={RelativeSource TemplatedParent}}" />
                        </Grid.RenderTransform>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="MapShape">
        <TextBlock Text="{Binding Content}" 
                   Foreground="Red" 
                   maps:MapLayer.Position="{Binding GeoLocation}" 
                   />
    </DataTemplate>

    <Style TargetType="controls:OverheadMap">
        <Setter Property="RotationSource" Value="North" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:OverheadMap">
                    <Grid>
                        <!-- 
                        A Margin of -320 below ensures the map extends far enough outside our bounds 
                        that a rotation does not show edges. This number likely needs to be calculated 
                        but I'm not sure what the calculation is.
                        2011-09-08 - JBienz
                        -->
                        <maps:Map x:Name="Map" 
                                  HorizontalAlignment="Stretch" 
                                  VerticalAlignment="Stretch"
                                  Margin="-320"
                                  RenderTransformOrigin="0.5,0.5">
                            <maps:Map.RenderTransform>
                                <RotateTransform Angle="{Binding Rotation, RelativeSource={RelativeSource TemplatedParent}}" />
                            </maps:Map.RenderTransform>
                            <maps:MapItemsControl x:Name="ItemsLayer" ItemTemplate="{StaticResource MapShape}" ItemsSource="{Binding}" />
                        </maps:Map>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="controls:WorldView">
        
        <!-- Our items panel is simply a canvas -->
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <Canvas />
                </ItemsPanelTemplate>
            </Setter.Value>    
        </Setter>
        
        <!-- Our ItemTemplate is defined inline and it's simply a TextBlock that shows the ARItem.Content property (.ToString) -->
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{Binding Content}" FontSize="72" Foreground="Red" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="controls:VideoPreview">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:VideoPreview">
                    <!-- The VideoPreview control has a property called 'VideoSource' which is the MediaCapture Manager -->
                    <CaptureElement x:Name="CaptureElement" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>